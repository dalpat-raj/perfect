datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role           UserRole   @default(USER)
  address        Address?  @relation(fields: [addressId], references: [id])
  addressId      Int?      @unique
  orders         Order[]
  reviews        Review[]
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
// remove it later be careful
model VerificationToken {
  id  String @id @default(cuid())
  email String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}
 
model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Address {
  id              Int     @id @default(autoincrement())
  completeAddress String
  nearbyLandmark  String?
  phone           String
  city            String
  state           String
  pinCode         String?
  user            User? 
  userId          String?    @unique // Allows only one address per user
}

model Order {
  id             Int      @id @default(autoincrement())
  items          OrderItem[]
  subTotal       Float?
  shippingCharge Float?
  totalAmount    Float
  discountPrice  Float?
  status         String @default("Order Confirmed")
  statusHistory  StatusHistory[]
  paymentInfo    PaymentInfo?  @relation(fields: [paymentInfoId], references: [id])
  paymentInfoId      Int?      @unique
  userId         String?    
  user           User?     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  deliverAt      DateTime @default(now())
}

model StatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    String
  changedAt DateTime @default(now())
  
  order     Order    @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  title      String
  price      Float
  stock      Int
  modelNumber String
  image      String
  rating     Float 
  color      String
  model      String
  quantity   Int

  order      Order   @relation(fields: [orderId], references: [id])
}

model PaymentInfo {
  id Int @id @default(autoincrement())
  type String
  status String
  order Order?
}


model Product {
  id            Int     @id @default(autoincrement())
  title         String 
  description   String
  modelNumber   String
  stock         Int
  originalPrice Float
  sellingPrice  Float
  collection    String
  color         String
  model         String[] 
  feature       String[] 
  images        String[] 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  review        Review[]
  rating        Float? @default(0)

  events        EventProduct[] 
}

model Event {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  discount    Float
  endDate     DateTime
  createdAt   DateTime     @default(now())
  products    EventProduct[] // List of associated products
}

model EventProduct {
  id       Int      @id @default(autoincrement())
  event    Event    @relation(fields: [eventId], references: [id])
  eventId  Int
  product  Product  @relation(fields: [productId], references: [id])
  productId Int 
}

model Review {
  id            Int       @id @default(autoincrement())
  name String
  email String
  message String
  images String[]
  productId Int
  rating Float
  product        Product?  @relation(fields: [productId], references: [id])   
  user           User?     @relation(fields: [email], references: [email])
  createdAt DateTime @default(now())
}

model Collection {
  id  Int @id @default(autoincrement())
  title String
  image String?
}

model Coupon {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  discount      Float    // Discount value (e.g., 10 for 10%)
  isActive      Boolean  @default(true)
  expirationDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Banner {
  id Int @id @default(autoincrement())
  url String
  images String[]
  createdAt DateTime @default(now())
}





